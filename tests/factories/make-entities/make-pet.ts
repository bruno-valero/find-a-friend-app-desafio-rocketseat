import UniqueEntityId from '@/core/entities/unique-entity-id'
import { Pet } from '@/domain/find-a-friend/enterprise/entities/pet'
import { Address } from '@/domain/find-a-friend/enterprise/entities/value-objects/address'
import { PetCharacteristics } from '@/domain/find-a-friend/enterprise/entities/value-objects/pet-characteristics'
import { StatesShort } from '@/domain/find-a-friend/enterprise/entities/value-objects/state'
import { faker } from '@faker-js/faker'

export function makePet(override?: Partial<Pet>) {
  const states: StatesShort[] = [
    'AM',
    'PA',
    'RR',
    'AP',
    'AC',
    'RO',
    'TO',
    'MA',
    'PI',
    'CE',
    'RN',
    'PB',
    'PE',
    'AL',
    'SE',
    'BA',
    'MG',
    'ES',
    'RJ',
    'SP',
    'PR',
    'SC',
    'RS',
    'MS',
    'MT',
    'GO',
    'DF',
  ]
  const address = new Address({
    cep: faker.number.int({ min: 10000000, max: 99999999 }).toString(),
    city: faker.location.city(),
    neighborhood: faker.lorem.sentence(2),
    number: String(faker.number.int({ min: 0, max: 10000 })),
    state: states[Math.floor(Math.random() * states.length)],
    street: faker.location.street(),
  })

  const colors: PetCharacteristics['color'][] = [
    'preto',
    'marrom',
    'branco',
    'cinza',
    'amarelo',
    'dourado',
    'preto',
    'branco',
    'cinza',
    'amarelo',
    'laranja',
    'listrado',
    'laranja',
    'azul',
    'vermelho',
    'amarelo',
    'verde',
    'branco',
    'preto',
    'vermelho',
    'azul',
    'verde',
    'amarelo',
    'branco',
    'preto',
    'cinza',
    'marrom',
    'amarelo',
    'dourado',
    'branco',
    'preto',
    'marrom',
    'cinza',
    'listrado',
    'verde',
    'marrom',
    'preto',
    'amarelo',
    'cinza',
    'listrado',
    'branco',
    'preto',
    'marrom',
    'cinza',
    'listrado',
    'preto',
    'marrom',
    'cinza',
    'listrado',
    'verde',
    'marrom',
    'preto',
    'verde',
    'marrom',
    'listrado',
    'verde',
    'marrom',
    'preto',
    'cinza',
    'listrado',
    'amarelo',
    'branco',
    'cinza',
    'branco',
    'cinza',
    'marrom',
    'preto',
    'listrado',
    'branco',
    'preto',
    'cinza',
    'marrom',
    'branco',
    'preto',
    'cinza',
    'marrom',
    'branco',
    'preto',
    'cinza',
    'marrom',
  ]
  const types: PetCharacteristics['type'][] = [
    'Cachorro',
    'Gato',
    'Peixe',
    'Pássaro',
    'Hamster',
    'Coelho',
    'Tartaruga',
    'Porquinho-da-índia',
    'Cobra',
    'Furão',
    'Chinchila',
    'Rato',
    'Lagarto',
    'Ouriço',
    'Aranha',
    'Sapo',
    'Periquito',
    'Papagaio',
    'Canário',
    'Gerbil',
    'Axolote',
    'Tarântula',
  ]
  const mains: PetCharacteristics['main'][] = [
    'Leal',
    'brincalhão',
    'necessita de exercício regular',
    'diurno',
    'não venenoso',
    'tamanho médio',
    'Independente',
    'limpo',
    'pode ser afetuoso',
    'requer ambiente específico',
    'tamanho médio',
    'Relativamente fácil de cuidar',
    'silencioso',
    'requer ambiente específico',
    'tamanho pequeno',
    'Pode ser cantante',
    'requer interação',
    'tamanho pequeno',
    'Pequeno',
    'atividade noturna',
    'vive em gaiolas',
    'noturno',
    'requer rodinha para exercício',
    'tamanho pequeno',
    'Sociável',
    'pode ser treinado',
    'requer ambiente específico',
    'tamanho médio',
    'Longa expectativa de vida',
    'requer ambiente específico',
    'dieta específica',
    'tamanho pequeno',
    'Sociável',
    'fácil de cuidar',
    'requer ambiente específico',
    'tamanho pequeno',
    'Requer habitat específico',
    'venenoso',
    'não venenoso',
    'tamanho pequeno',
    'Ativo',
    'curioso',
    'necessita de espaço para brincar',
    'noturno',
    'requer ambiente específico',
    'tamanho pequeno',
    'noturno',
    'sociável',
    'requer ambiente específico',
    'tamanho pequeno',
    'Inteligente',
    'pode ser treinado',
    'noturno',
    'requer ambiente específico',
    'tamanho pequeno',
    'Variedade de espécies',
    'requer ambiente específico',
    'algumas têm dietas específicas',
    'tamanho pequeno',
    'noturno',
    'requer ambiente específico',
    'dieta específica',
    'tamanho pequeno',
    'Diversidade de espécies',
    'venenoso',
    'não venenoso',
    'tamanho pequeno',
    'Aquático',
    'terrestre',
    'algumas espécies são venenosas',
    'venenoso',
    'tamanho pequeno',
    'Sociável',
    'pode ser treinado para falar',
    'diurno',
    'requer ambiente específico',
    'tamanho pequeno',
    'Inteligente',
    'pode ser treinado',
    'noturno',
    'requer ambiente específico',
    'requer interação social',
    'requer estimulação',
    'não venenoso',
    'tamanho médio',
    'Cantante',
    'relativamente fácil de cuidar',
    'diurno',
    'requer ambiente específico',
    'não venenoso',
    'tamanho pequeno',
    'Sociável',
    'ativo',
    'diurno',
    'necessita de ambiente com espaço para cavar',
    'não venenoso',
    'tamanho pequeno',
    'Aquático',
    'diurno',
    'requer ambiente específico',
    'sensível à qualidade da água',
    'não venenoso',
    'tamanho pequeno',
    'Silenciosa',
    'diurno',
    'requer ambiente específico',
    'venenoso',
    'tamanho pequeno',
  ] as unknown as PetCharacteristics['main'][]

  const characteristics = new PetCharacteristics({
    color: colors[Math.floor(Math.random() * colors.length)],
    type: types[Math.floor(Math.random() * types.length)],
    main: mains[Math.floor(Math.random() * mains.length)],
    isAdoptable: Math.random() > 0.5,
  })

  return Pet.create({
    address,
    name: faker.person.firstName(),
    characteristics,
    orgId: new UniqueEntityId(),
    ...override,
  })
}
